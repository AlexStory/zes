package main

import (
	"math/rand"
	"os"
	"time"

	rl "github.com/gen2brain/raylib-go/raylib"
)

var SNAKECODE = [...]byte{
	0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06, 0x60, 0xa9, 0x02, 0x85,
	0x02, 0xa9, 0x04, 0x85, 0x03, 0xa9, 0x11, 0x85, 0x10, 0xa9, 0x10, 0x85, 0x12, 0xa9, 0x0f, 0x85,
	0x14, 0xa9, 0x04, 0x85, 0x11, 0x85, 0x13, 0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85, 0x00, 0xa5, 0xfe,
	0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60, 0x20, 0x4d, 0x06, 0x20, 0x8d, 0x06, 0x20, 0xc3,
	0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20, 0x2d, 0x07, 0x4c, 0x38, 0x06, 0xa5, 0xff, 0xc9,
	0x77, 0xf0, 0x0d, 0xc9, 0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0, 0x1b, 0xc9, 0x61, 0xf0, 0x22, 0x60,
	0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85, 0x02, 0x60, 0xa9, 0x08, 0x24, 0x02, 0xd0,
	0x1b, 0xa9, 0x02, 0x85, 0x02, 0x60, 0xa9, 0x01, 0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04, 0x85, 0x02,
	0x60, 0xa9, 0x02, 0x24, 0x02, 0xd0, 0x05, 0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06,
	0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00, 0xc5, 0x10, 0xd0, 0x0d, 0xa5, 0x01, 0xc5, 0x11, 0xd0, 0x07,
	0xe6, 0x03, 0xe6, 0x03, 0x20, 0x2a, 0x06, 0x60, 0xa2, 0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06,
	0xb5, 0x11, 0xc5, 0x11, 0xf0, 0x09, 0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c,
	0x35, 0x07, 0x60, 0xa6, 0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca, 0x10, 0xf9, 0xa5, 0x02,
	0x4a, 0xb0, 0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0, 0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9,
	0x20, 0x85, 0x10, 0x90, 0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01, 0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6,
	0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f, 0x60, 0xa5, 0x10, 0x18, 0x69, 0x20, 0x85, 0x10, 0xb0,
	0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11, 0xf0, 0x0c, 0x60, 0xc6, 0x10, 0xa5, 0x10, 0x29,
	0x1f, 0xc9, 0x1f, 0xf0, 0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe, 0x91, 0x00, 0x60,
	0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10, 0x60, 0xa2, 0x00, 0xea,
	0xea, 0xca, 0xd0, 0xfb, 0x60,
}

func main() {
	// init raylib
	rl.InitWindow(320, 320, "Snek on ZES")
	defer rl.CloseWindow()
	rl.SetTargetFPS(60)

	cpu := newCpu()
	cpu.snakeLoad(SNAKECODE[:])
	cpu.Reset()
	cpu.PC = 0x0600
	screenState := [32 * 32]byte{}

	cpu.RunWithCallback(func(c *Cpu) {
		handleEvent(c)
		c.Write(0xFE, byte(rand.Intn(256)))

		if readScreenState(c, &screenState) {
			drawScreen(screenState)
		}
		time.Sleep(10 * time.Microsecond)
	})
}

func handleEvent(cpu *Cpu) {
	if rl.WindowShouldClose() {
		os.Exit(0)
	}

	if rl.IsKeyPressed(rl.KeyW) {
		cpu.Write(0xFF, 0x77)
	}

	if rl.IsKeyPressed(rl.KeyA) {
		cpu.Write(0xFF, 0x61)
	}

	if rl.IsKeyPressed(rl.KeyS) {
		cpu.Write(0xFF, 0x73)
	}

	if rl.IsKeyPressed(rl.KeyD) {
		cpu.Write(0xFF, 0x64)
	}
}

func byteToColor(b byte) rl.Color {
	switch b {
	case 0x00:
		return rl.Black
	case 0x01:
		return rl.White
	case 0x02, 0x09:
		return rl.Gray
	case 0x03, 0x10:
		return rl.Red
	case 0x04, 0x11:
		return rl.Green
	case 0x05, 0x12:
		return rl.Blue
	case 0x06, 0x13:
		return rl.Magenta
	case 0x07, 0x14:
		return rl.Yellow
	default:
		return rl.SkyBlue

	}
}

func readScreenState(c *Cpu, frame *[32 * 32]byte) bool {
	idx := 0
	update := false
	for i := 0x0200; i < 0x0600; i++ {
		color := c.Read(uint16(i))
		if frame[idx] != color {
			frame[idx] = color
			update = true
		}
		idx++
	}

	return update
}

func drawScreen(frame [32 * 32]byte) {
	rl.BeginDrawing()
	rl.ClearBackground(rl.Black)
	for y := int32(0); y < 32; y++ {
		for x := int32(0); x < 32; x++ {
			color := byteToColor(frame[y*32+x])
			rl.DrawRectangle(x*10, y*10, 10, 10, color)
		}
	}
	rl.EndDrawing()
}
